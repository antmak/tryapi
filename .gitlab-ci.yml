image: mrnonz/alpine-git-curl

stages:
  - build
  - test
  - deploy
  - release_stage0
  - release_stage1
  - release_submit

variables:
  DIST_ART_DIR: "dist"
#  DIST_PREFIX: "${CI_PROJECT_NAME}"
  DIST_EXT: "tar.gz"
  DIST_INSTALLED_DIR: "${CI_PROJECT_NAME}-root"
  ARCHIVE_TOOL: "tar czvf"
  UNARCHIVE_TOOL: "tar xvf"
  ARCHIVE_EXT: "tar.gz"
#  ARCHIVE_NAME: "${DIST_PREFIX}-unknown.${ARCHIVE_EXT}"
  GH_SCRIPT_URL: https://ci.espressif.cn:42348/cache
  GH_SCRIPT: github-release
  GITHUB_USER: antmak
  GITHUB_TOKEN: 4bcdb0da39df5356c50abe62b5f6f781763ee579
  GITHUB_REPO: "${CI_PROJECT_NAME}"
  

.release_tag_filter: &release_tag_filter
  only:
    - /^tryapi-.*$/

.release_submit_action: &release_submit_action
  when: manual
  allow_failure: false

.dist_archive: &dist_archive |
  ${ARCHIVE_TOOL} ${ARCHIVE_NAME} ${DIST_INSTALLED_DIR}
  mkdir -p ${DIST_ART_DIR}
  mv ${ARCHIVE_NAME} ${DIST_ART_DIR}
  echo "${ARCHIVE_NAME}" > ${DIST_ART_DIR}/dist_name_${PLATFORM_NAME}

.get_release_name: &get_release_name |
  REL_DESC=$(git describe --tags)
  REL_NAME=${REL_DESC}-${PLATFORM_NAME}
  ARCHIVE_NAME=${REL_NAME}.${DIST_EXT}
  echo "PLATFORM_NAME: $PLATFORM_NAME"
  echo "REL_DESC: $REL_DESC"
  echo "REL_NAME: $REL_NAME"
  echo "ARCHIVE_NAME: $ARCHIVE_NAME"

.gh_getting_tool: &gh_getting_tool |
  wget --no-verbose $GH_SCRIPT_URL/$GH_SCRIPT
  chmod +x ./$GH_SCRIPT

.add_gh_key: &add_gh_key |
  which ssh-agent || ( apt-get update -y -q && apt-get install -y -q --no-install-recommends openssh-client )
  eval $(ssh-agent -s)
  echo "${GH_KEY}" | base64 -d --ignore-garbage | ssh-add - > /dev/null
  mkdir -p ~/.ssh && chmod 700 ~/.ssh
  [[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config || true

before_script:
  - set -o errexit; set -o pipefail; set -o nounset

build_linux:
  stage: build
  artifacts:
    paths:
      - ${DIST_ART_DIR}
  variables:
    PLATFORM_NAME: "linux64"
  script:
    - echo -----------------------------------------------------
    - test $CI_COMMIT_TAG && echo "Has tag $CI_COMMIT_TAG" || echo "No tag"
    - test $CI_COMMIT_REF_NAME && echo "Has name $CI_COMMIT_REF_NAME" || echo "No ref name"
    - test $CI_COMMIT_REF_SLUG && echo "Has slug $CI_COMMIT_REF_SLUG" || echo "No slug name"
    - test $CI_PROJECT_NAME && echo "Has proj name $CI_PROJECT_NAME" || echo "No proj name"
    - test $CI_PROJECT_PATH && echo "Has proj path $CI_PROJECT_PATH" || echo "No proj path"
    - test $CI_PROJECT_PATH_SLUG && echo "Has slug path $CI_PROJECT_PATH_SLUG" || echo "No slug path"
    - git describe || true
    - git describe --tags || true
    - git describe --always || true
    - echo -----------------------------------------------------
    - *get_release_name
    # dummy install
    - mkdir -p $DIST_INSTALLED_DIR
    - echo "compiled binaries" > $DIST_INSTALLED_DIR/some_files.bin
    - *dist_archive

build_windows:
  stage: build
  artifacts:
    paths:
      - ${DIST_ART_DIR}
  variables:
    PLATFORM_NAME: "win32"
  script:
    - *get_release_name
    # dummy install
    - mkdir -p $DIST_INSTALLED_DIR
    - echo "compiled binaries" > $DIST_INSTALLED_DIR/some_files.bin
    - *dist_archive

test_linux:
  stage: test
  script:
    - echo test lin

test_win:
  stage: test
  script:
    - echo test win

push_master_to_github:
  stage: deploy
  only:
    - master
  when: on_success
  script:
    - *add_gh_key
    - git remote add github git@github.com:antmak/tryapi.git
    - git push github HEAD:master

release_gh_draft:
  stage: release_stage0
  <<: *release_tag_filter
  script:
    - *gh_getting_tool
    - *add_gh_key
    # update GH
    - git remote add github git@github.com:antmak/tryapi.git
    - git push github ${CI_COMMIT_TAG}
    # release draft
    - ./${GH_SCRIPT} release --tag ${CI_COMMIT_TAG} --description "Some description" --draft

release_gh_upload_linux:
  stage: release_stage1
  <<: *release_tag_filter
  script:
    - echo Upload linux dist
#    - ./$GH_SCRIPT upload --tag vNewTag --file $DIST_DIR/

release_gh_upload_win:
  stage: release_stage1
  <<: *release_tag_filter
  script:
    - echo Upload win dist

release_gh_submit:
  stage: release_submit
  <<: *release_tag_filter
  <<: *release_submit_action
  script:
    - echo Transform draft to release, confirm release

